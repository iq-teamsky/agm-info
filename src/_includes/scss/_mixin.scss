@mixin trns {
  @extend .trns;
}

@mixin transition($transition) {
  -webkit-transition: $transition;
  transition: $transition;
}

@mixin transition-duration($transition-duration) {
  -webkit-transition-duration: $transition-duration;
  transition-duration: $transition-duration;
}

@mixin transition-delay($transition-delay) {
  -webkit-transition-duration: $transition-delay;
  transition-duration: $transition-delay;
}

@mixin transition-timing-function($transition-timing-function) {
  -webkit-transition-duration: $transition-timing-function;
  transition-duration: $transition-timing-function;
}

@mixin transform($x) {
  -webkit-transform: $x;
  transform: $x;
}

@mixin display-flex($flex) {
  display: -webkit-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin inline-flex($flex) {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

@mixin flex-column($column) {
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -ms-flex-direction: column;
  -webkit-flex-direction: column;
  flex-direction: column;
}

@mixin justify-content($value) {
  -webkit-box-pack: $value;
  -ms-flex-pack: $value;
  -webkit-justify-content: $value;
  justify-content: $value;
}

@mixin flex_center {
  @include display-flex(flex);
  @include justify-content(center);
  @include flex-column(column);
}

@mixin appearance($none) {
  -webkit-appearance: $none;
  -moz-appearance: $none;
  appearance: $none;
}

@mixin placehold {
  &::-webkit-input-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }
}

@mixin keyframe($animName) {
  @-webkit-keyframes #{$animName} {
    @content;
  }

  @keyframes #{$animName} {
    @content;
  }
}

//responsive media query mixin

@mixin mq($mediaName) {
  @if $mediaName == "xs" {
    @media only screen and (max-width: 575px) {
      @content;
    }
  }
  @else if $mediaName == "sm" {
    @media only screen and (min-width: 576px) and (max-width: 767px) {
      @content;
    }
  }
  @else if $mediaName == "xsm" {
    @media only screen and (max-width: 767px) {
      @content;
    }
  }
  @else if $mediaName == "md" {
    @media only screen and (min-width: 768px) and (max-width: 991px) {
      @content;
    }
  }
  @else if $mediaName == "medium" {
    @media only screen and (min-width: 768px) {
      @content;
    }
  }
  @else if $mediaName == "xmd" {
    @media only screen and (max-width: 991px) {
      @content;
    }
  }
  @else if $mediaName == "mmd" {
    @media only screen and (min-width: 991px) {
      @content;
    }
  }
  @else if $mediaName == "lg" {
    @media only screen and (min-width: 992px) and (max-width: 1199px) {
      @content;
    }
  }
  @else if $mediaName == "large" {
    @media only screen and (min-width: 992px) {
      @content;
    }
  }
  @else if $mediaName == "xlg" {
    @media only screen and (max-width: 1199px) {
      @content;
    }
  }
  @else if $mediaName == "mlg" {
    @media only screen and (min-width: 992px) {
      @content;
    }
  }
  @else if $mediaName == "xl" {
    @media only screen and (min-width: 1200px) {
      @content;
    }
  }
  @else if $mediaName == "xxl" {
    @media only screen and (max-width: 1199px) {
      @content;
    }
  }
}

@mixin cmq($val1, $val2) {
  @media only screen and (min-width: $val1) and (max-width: $val2) {
    @content;
  }
}

/**
 * MEDIA QUERY MIXIN
 * Pass in the key of one of your breakpoints set in `$gorko-config['breakpoints']`
 * and this mixin will generate the @media query with your configured value.
 *
 * @param {string} $key - The key of your configured breakpoint
 */
@mixin media-query($name) {
	$breakpoint: map-get($breakpoints, $name);
	$matched-breakpoint: $breakpoint;

	@if not $matched-breakpoint {
		@warn "Warning: `#{$name}` is not a valid breakpoint name.";
	} @else {
	@media screen and (#{$matched-breakpoint}) {
		@content;
	}
	}
}